@page "/lifecycle"
@rendermode InteractiveServer



<PageTitle>LifeCycle</PageTitle>

<h1 class="text-success">Blazor LifeCycle</h1>



<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


<div class="border border-3 border-danger my-2 p-4">
    <MusicBeam.Components.Pages.Children._LifeCycleChild CountValue="@currentCount"></MusicBeam.Components.Pages.Children._LifeCycleChild>
</div>


@foreach (var item in EventType)
{
    <p>@item</p>
    <hr />
}




@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();



    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        EventType.Add("OnInitializedAsync is called !");
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called !");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called !");
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1500);
        EventType.Add("OnParametersSetAsync is called !");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // if (firstRender)
        // {
        //     currentCount = 100;
        // }
        // else
        // {
        //     currentCount = 200;
        // }

        EventType.Add("OnAfterRender is called !");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(1500);
        EventType.Add("OnAfterRenderAsync is called !");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called !");
        return true;
    }







}
