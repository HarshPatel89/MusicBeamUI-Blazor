@page "/"
@rendermode InteractiveServer
@inject IJSRuntime _JSRuntime

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="row">
    <button class="btn btn-secondary m-2" style="width:200px" @onclick="TestConfirmBox">Test Confirm Button</button>
</div>


<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    }
    else
    {
        <p>Pending Confirmation.</p>
    }
</div>

<div>
    <button class="btn btn-success m-2" style="width:200px" @onclick="ToastrSuccess">Show Success</button>
    <button class="btn btn-warning m-2" style="width:200px" @onclick="ToastrError">Show Error</button>
</div>

<div>
    <button class="btn btn-success m-2" style="width:200px" @onclick="SweetSuccess">Show Sweet Success</button>
    <button class="btn btn-danger m-2" style="width:200px" @onclick="SweetError">Show Sweet Error</button>
</div>

@code {

    private string ConfirmMessage = "Are you sure to click here?";

    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox()
    {
        ConfirmResult = await _JSRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
    }



    private async Task ToastrSuccess(){
        await _JSRuntime.ToastrSuccess("Success Notification");
    }

    private async Task ToastrError()
    {
        await _JSRuntime.ToastrError("Error Notification");
    }

    private async Task SweetSuccess()
    {
        await _JSRuntime.SweetSuccess("Success Notification");
    }

    private async Task SweetError()
    {
        await _JSRuntime.SweetError("Error Notification");
    }

}

